#
# A jekyll hook, that verifies, that the generated rule documentation pages are existing.
# They would be generated by calling "./mvnw package -Pgenerate-rule-docs -pl pmd-doc", but are
# missing on a fresh clone/checkout.
# This is to avoid creating PMD documentation without rule documentation.
#
# Note: This does exclude various ruleset categories, as they don't contain rules and we don't
# generate documentation for these.
#

Jekyll::Hooks.register :site, :after_init do |site|
    ENV_VAR_NAME='PMD_DOC_IGNORE_MISSING_RULE_DOC'

    if ENV[ENV_VAR_NAME] then
        Jekyll.logger.warn "Not verifying that generated rule doc pages exist. The generated documentation might be incomplete!"
    else

        def check_file(filename, mtime = nil, messages)
            if not File.exist?(filename)
                messages << "File #{filename} does not exist!"
            elsif mtime != nil and File.stat(filename).mtime < mtime
                messages << "File #{filename} needs to be regenerated!"
            end
        end

        sourceDir = site.source
        Jekyll.logger.info "Verifying that generated rule doc pages exist in #{sourceDir}..."

        languages = {}
        categories = {}
        Dir.glob('**/src/main/resources/category/*/*.xml', base: "#{sourceDir}/..").each {|file|
            mtime = File.stat("#{sourceDir}/../#{file}").mtime
            %r<.+src/main/resources/category/([^/]+)/([^.]+)\.xml> =~ file
            languages[$1] = 1
            categories["#{$1}/#{$2}.md"] = mtime
        }

        messages = []

        languages_exceptions = [
            'wsdl'
        ]
        languages.each { |lang, _|
            check_file "#{sourceDir}/pages/pmd/rules/#{lang}.md", messages unless languages_exceptions.any?(lang)
        }

        categories_exceptions = [
            'apex/multithreading.md',
            'html/codestyle.md',
            'html/design.md',
            'html/documentation.md',
            'html/errorprone.md',
            'html/multithreading.md',
            'html/performance.md',
            'html/security.md',
            'ecmascript/design.md',
            'ecmascript/documentation.md',
            'ecmascript/multithreading.md',
            'ecmascript/security.md',
            'jsp/documentation.md',
            'jsp/multithreading.md',
            'jsp/performance.md',
            'plsql/documentation.md',
            'plsql/multithreading.md',
            'plsql/performance.md',
            'plsql/security.md',
            'scala/bestpractices.md',
            'scala/codestyle.md',
            'scala/design.md',
            'scala/documentation.md',
            'scala/errorprone.md',
            'scala/multithreading.md',
            'scala/performance.md',
            'scala/security.md',
            'swift/codestyle.md',
            'swift/design.md',
            'swift/documentation.md',
            'swift/multithreading.md',
            'swift/performance.md',
            'swift/security.md',
            'velocity/codestyle.md',
            'velocity/documentation.md',
            'velocity/multithreading.md',
            'velocity/performance.md',
            'velocity/security.md',
            'visualforce/bestpractices.md',
            'visualforce/codestyle.md',
            'visualforce/design.md',
            'visualforce/documentation.md',
            'visualforce/errorprone.md',
            'visualforce/multithreading.md',
            'visualforce/performance.md',
            'pom/bestpractices.md',
            'pom/codestyle.md',
            'pom/design.md',
            'pom/documentation.md',
            'pom/multithreading.md',
            'pom/performance.md',
            'pom/security.md',
            'wsdl/bestpractices.md',
            'wsdl/codestyle.md',
            'wsdl/design.md',
            'wsdl/documentation.md',
            'wsdl/errorprone.md',
            'wsdl/multithreading.md',
            'wsdl/performance.md',
            'wsdl/security.md',
            'xml/codestyle.md',
            'xml/design.md',
            'xml/documentation.md',
            'xml/multithreading.md',
            'xml/performance.md',
            'xml/security.md',
            'xsl/bestpractices.md',
            'xsl/design.md',
            'xsl/documentation.md',
            'xsl/errorprone.md',
            'xsl/multithreading.md',
            'xsl/security.md'
        ]
        categories.each { |cat, mtime|
            check_file "#{sourceDir}/pages/pmd/rules/#{cat}", mtime, messages unless categories_exceptions.any?(cat)
        }

        if not messages.empty?
            messages.each {|m| Jekyll.logger.error m}
            Jekyll.logger.abort_with "Please execute `./mvnw package -Pgenerate-rule-docs -pl pmd-doc` before"\
              "generating pmd documentation or ignore by setting env variable #{ENV_VAR_NAME}"
        end
    end
end
